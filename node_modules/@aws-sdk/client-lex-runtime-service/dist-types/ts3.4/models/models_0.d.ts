
import { LazyJsonString as __LazyJsonString } from "@aws-sdk/smithy-client";
import { MetadataBearer as $MetadataBearer, SmithyException as __SmithyException } from "@aws-sdk/types";
import { Readable } from "stream";

export interface ActiveContextTimeToLive {
    
    timeToLiveInSeconds?: number;
    
    turnsToLive?: number;
}
export declare namespace ActiveContextTimeToLive {
    
    const filterSensitiveLog: (obj: ActiveContextTimeToLive) => any;
}

export interface ActiveContext {
    
    name: string | undefined;
    
    timeToLive: ActiveContextTimeToLive | undefined;
    
    parameters: {
        [key: string]: string;
    } | undefined;
}
export declare namespace ActiveContext {
    
    const filterSensitiveLog: (obj: ActiveContext) => any;
}

export interface BadRequestException extends __SmithyException, $MetadataBearer {
    name: "BadRequestException";
    $fault: "client";
    message?: string;
}
export declare namespace BadRequestException {
    
    const filterSensitiveLog: (obj: BadRequestException) => any;
}

export interface ConflictException extends __SmithyException, $MetadataBearer {
    name: "ConflictException";
    $fault: "client";
    message?: string;
}
export declare namespace ConflictException {
    
    const filterSensitiveLog: (obj: ConflictException) => any;
}
export interface DeleteSessionRequest {
    
    botName: string | undefined;
    
    botAlias: string | undefined;
    
    userId: string | undefined;
}
export declare namespace DeleteSessionRequest {
    
    const filterSensitiveLog: (obj: DeleteSessionRequest) => any;
}
export interface DeleteSessionResponse {
    
    botName?: string;
    
    botAlias?: string;
    
    userId?: string;
    
    sessionId?: string;
}
export declare namespace DeleteSessionResponse {
    
    const filterSensitiveLog: (obj: DeleteSessionResponse) => any;
}

export interface InternalFailureException extends __SmithyException, $MetadataBearer {
    name: "InternalFailureException";
    $fault: "server";
    message?: string;
}
export declare namespace InternalFailureException {
    
    const filterSensitiveLog: (obj: InternalFailureException) => any;
}

export interface LimitExceededException extends __SmithyException, $MetadataBearer {
    name: "LimitExceededException";
    $fault: "client";
    retryAfterSeconds?: string;
    message?: string;
}
export declare namespace LimitExceededException {
    
    const filterSensitiveLog: (obj: LimitExceededException) => any;
}

export interface NotFoundException extends __SmithyException, $MetadataBearer {
    name: "NotFoundException";
    $fault: "client";
    message?: string;
}
export declare namespace NotFoundException {
    
    const filterSensitiveLog: (obj: NotFoundException) => any;
}
export interface GetSessionRequest {
    
    botName: string | undefined;
    
    botAlias: string | undefined;
    
    userId: string | undefined;
    
    checkpointLabelFilter?: string;
}
export declare namespace GetSessionRequest {
    
    const filterSensitiveLog: (obj: GetSessionRequest) => any;
}
export declare enum FulfillmentState {
    FAILED = "Failed",
    FULFILLED = "Fulfilled",
    READY_FOR_FULFILLMENT = "ReadyForFulfillment"
}
export declare enum MessageFormatType {
    COMPOSITE = "Composite",
    CUSTOM_PAYLOAD = "CustomPayload",
    PLAIN_TEXT = "PlainText",
    SSML = "SSML"
}
export declare enum DialogActionType {
    CLOSE = "Close",
    CONFIRM_INTENT = "ConfirmIntent",
    DELEGATE = "Delegate",
    ELICIT_INTENT = "ElicitIntent",
    ELICIT_SLOT = "ElicitSlot"
}

export interface DialogAction {
    
    type: DialogActionType | string | undefined;
    
    intentName?: string;
    
    slots?: {
        [key: string]: string;
    };
    
    slotToElicit?: string;
    
    fulfillmentState?: FulfillmentState | string;
    
    message?: string;
    
    messageFormat?: MessageFormatType | string;
}
export declare namespace DialogAction {
    
    const filterSensitiveLog: (obj: DialogAction) => any;
}
export declare enum ConfirmationStatus {
    CONFIRMED = "Confirmed",
    DENIED = "Denied",
    NONE = "None"
}

export interface IntentSummary {
    
    intentName?: string;
    
    checkpointLabel?: string;
    
    slots?: {
        [key: string]: string;
    };
    
    confirmationStatus?: ConfirmationStatus | string;
    
    dialogActionType: DialogActionType | string | undefined;
    
    fulfillmentState?: FulfillmentState | string;
    
    slotToElicit?: string;
}
export declare namespace IntentSummary {
    
    const filterSensitiveLog: (obj: IntentSummary) => any;
}
export interface GetSessionResponse {
    
    recentIntentSummaryView?: IntentSummary[];
    
    sessionAttributes?: {
        [key: string]: string;
    };
    
    sessionId?: string;
    
    dialogAction?: DialogAction;
    
    activeContexts?: ActiveContext[];
}
export declare namespace GetSessionResponse {
    
    const filterSensitiveLog: (obj: GetSessionResponse) => any;
}

export interface BadGatewayException extends __SmithyException, $MetadataBearer {
    name: "BadGatewayException";
    $fault: "server";
    Message?: string;
}
export declare namespace BadGatewayException {
    
    const filterSensitiveLog: (obj: BadGatewayException) => any;
}

export interface DependencyFailedException extends __SmithyException, $MetadataBearer {
    name: "DependencyFailedException";
    $fault: "client";
    Message?: string;
}
export declare namespace DependencyFailedException {
    
    const filterSensitiveLog: (obj: DependencyFailedException) => any;
}

export interface LoopDetectedException extends __SmithyException, $MetadataBearer {
    name: "LoopDetectedException";
    $fault: "server";
    Message?: string;
}
export declare namespace LoopDetectedException {
    
    const filterSensitiveLog: (obj: LoopDetectedException) => any;
}

export interface NotAcceptableException extends __SmithyException, $MetadataBearer {
    name: "NotAcceptableException";
    $fault: "client";
    message?: string;
}
export declare namespace NotAcceptableException {
    
    const filterSensitiveLog: (obj: NotAcceptableException) => any;
}
export interface PostContentRequest {
    
    botName: string | undefined;
    
    botAlias: string | undefined;
    
    userId: string | undefined;
    
    sessionAttributes?: __LazyJsonString | string;
    
    requestAttributes?: __LazyJsonString | string;
    
    contentType: string | undefined;
    