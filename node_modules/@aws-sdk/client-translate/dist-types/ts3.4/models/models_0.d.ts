import { MetadataBearer as $MetadataBearer, SmithyException as __SmithyException } from "@aws-sdk/types";

export interface Term {
    
    SourceText?: string;
    
    TargetText?: string;
}
export declare namespace Term {
    
    const filterSensitiveLog: (obj: Term) => any;
}

export interface AppliedTerminology {
    
    Name?: string;
    
    Terms?: Term[];
}
export declare namespace AppliedTerminology {
    
    const filterSensitiveLog: (obj: AppliedTerminology) => any;
}

export interface ConflictException extends __SmithyException, $MetadataBearer {
    name: "ConflictException";
    $fault: "client";
    Message?: string;
}
export declare namespace ConflictException {
    
    const filterSensitiveLog: (obj: ConflictException) => any;
}
export declare enum EncryptionKeyType {
    KMS = "KMS"
}

export interface EncryptionKey {
    
    Type: EncryptionKeyType | string | undefined;
    
    Id: string | undefined;
}
export declare namespace EncryptionKey {
    
    const filterSensitiveLog: (obj: EncryptionKey) => any;
}
export declare enum ParallelDataFormat {
    CSV = "CSV",
    TMX = "TMX",
    TSV = "TSV"
}

export interface ParallelDataConfig {
    
    S3Uri: string | undefined;
    
    Format: ParallelDataFormat | string | undefined;
}
export declare namespace ParallelDataConfig {
    
    const filterSensitiveLog: (obj: ParallelDataConfig) => any;
}
export interface CreateParallelDataRequest {
    
    Name: string | undefined;
    
    Description?: string;
    
    ParallelDataConfig: ParallelDataConfig | undefined;
    
    EncryptionKey?: EncryptionKey;
    
    ClientToken?: string;
}
export declare namespace CreateParallelDataRequest {
    
    const filterSensitiveLog: (obj: CreateParallelDataRequest) => any;
}
export declare enum ParallelDataStatus {
    ACTIVE = "ACTIVE",
    CREATING = "CREATING",
    DELETING = "DELETING",
    FAILED = "FAILED",
    UPDATING = "UPDATING"
}
export interface CreateParallelDataResponse {
    
    Name?: string;
    
    Status?: ParallelDataStatus | string;
}
export declare namespace CreateParallelDataResponse {
    
    const filterSensitiveLog: (obj: CreateParallelDataResponse) => any;
}

export interface InternalServerException extends __SmithyException, $MetadataBearer {
    name: "InternalServerException";
    $fault: "server";
    Message?: string;
}
export declare namespace InternalServerException {
    
    const filterSensitiveLog: (obj: InternalServerException) => any;
}

export interface InvalidParameterValueException extends __SmithyException, $MetadataBearer {
    name: "InvalidParameterValueException";
    $fault: "client";
    Message?: string;
}
export declare namespace InvalidParameterValueException {
    
    const filterSensitiveLog: (obj: InvalidParameterValueException) => any;
}

export interface InvalidRequestException extends __SmithyException, $MetadataBearer {
    name: "InvalidRequestException";
    $fault: "client";
    Message?: string;
}
export declare namespace InvalidRequestException {
    
    const filterSensitiveLog: (obj: InvalidRequestException) => any;
}

export interface LimitExceededException extends __SmithyException, $MetadataBearer {
    name: "LimitExceededException";
    $fault: "client";
    Message?: string;
}
export declare namespace LimitExceededException {
    
    const filterSensitiveLog: (obj: LimitExceededException) => any;
}

export interface TooManyRequestsException extends __SmithyException, $MetadataBearer {
    name: "TooManyRequestsException";
    $fault: "client";
    Message?: string;
}
export declare namespace TooManyRequestsException {
    
    const filterSensitiveLog: (obj: TooManyRequestsException) => any;
}

export interface ConcurrentModificationException extends __SmithyException, $MetadataBearer {
    name: "ConcurrentModificationException";
    $fault: "client";
    Message?: string;
}
export declare namespace ConcurrentModificationException {
    
    const filterSensitiveLog: (obj: ConcurrentModificationException) => any;
}
export interface DeleteParallelDataRequest {
    
    Name: string | undefined;
}
export declare namespace DeleteParallelDataRequest {
    
    const filterSensitiveLog: (obj: DeleteParallelDataRequest) => any;
}
export interface DeleteParallelDataResponse {
    
    Name?: string;
    
    Status?: ParallelDataStatus | string;
}
export declare namespace DeleteParallelDataResponse {
    
    const filterSensitiveLog: (obj: DeleteParallelDataResponse) => any;
}

export interface ResourceNotFoundException extends __SmithyException, $MetadataBearer {
    name: "ResourceNotFoundException";
    $fault: "client";
    Message?: string;
}
export declare namespace ResourceNotFoundException {
    
    const filterSensitiveLog: (obj: ResourceNotFoundException) => any;
}
export interface DeleteTerminologyRequest {
    
    Name: string | undefined;
}
export declare namespace DeleteTerminologyRequest {
    
    const filterSensitiveLog: (obj: DeleteTerminologyRequest) => any;
}
export interface DescribeTextTranslationJobRequest {
    
    JobId: string | undefined;
}
export declare namespace DescribeTextTranslationJobRequest {
    
    const filterSensitiveLog: (obj: DescribeTextTranslationJobRequest) => any;
}

export interface InputDataConfig {
    
    S3Uri: string | undefined;
    
    ContentType: string | undefined;
}
export declare namespace InputDataConfig {
    
    const filterSensitiveLog: (obj: InputDataConfig) => any;
}

export interface JobDetails {
    
    TranslatedDocumentsCount?: number;
    
    DocumentsWithErrorsCount?: number;
    
    InputDocumentsCount?: number;
}
export declare namespace JobDetails {
    
    const filterSensitiveLog: (obj: JobDetails) => any;
}
export declare enum JobStatus {
    COMPLETED = "COMPLETED",
    COMPLETED_WITH_ERROR = "COMPLETED_WITH_ERROR",
    FAILED = "FAILED",
    IN_PROGRESS = "IN_PROGRESS",
    STOPPED = "STOPPED",
    STOP_REQUESTED = "STOP_REQUESTED",
    SUBMITTED = "SUBMITTED"
}

export interface OutputDataConfig {
    
    S3Uri: string | undefined;
    
    EncryptionKey?: EncryptionKey;
}
export declare namespace OutputDataConfig {
    
    const filterSensitiveLog: (obj: OutputDataConfig) => any;
}

export interface TextTranslationJobProperties {
    
    JobId?: string;
    
    JobName?: string;
    
    JobStatus?: JobStatus | string;
    
    JobDetails?: JobDetails;
    
    SourceLanguageCode?: string;
    
    TargetLanguageCodes?: string[];
    
    TerminologyNames?: string[];
    
    ParallelDataNames?: string[];
    
    Message?: string;
    
    SubmittedTime?: Date;
    
    EndTime?: Date;
    
    InputDataConfig?: InputDataConfig;
    
    OutputDataConfig?: OutputDataConfig;
    
    DataAccessRoleArn?: string;
}
export declare namespace TextTranslationJobProperties {
    
    const filterSensitiveLog: (obj: TextTranslationJobProperties) => any;
}
export interface DescribeTextTranslationJobResponse {
    
    TextTranslationJobProperties?: TextTranslationJobProperties;
}
export declare namespace DescribeTextTranslationJobResponse {
    
    const filterSensitiveLog: (obj: DescribeTextTranslationJobResponse) => any;
}
export interface GetParallelDataRequest {
    
    Name: string | undefined;
}
export declare namespace GetParallelDataRequest {
    
    const filterSensitiveLog: (obj: GetParallelDataRequest) => any;
}

export interface ParallelDataDataLocation {
    
    RepositoryType: string | undefined;
    
    Location: string | undefined;
}
export declare namespace ParallelDataDataLocation {
    
    const filterSensitiveLog: (obj: ParallelDataDataLocation) => any;
}

export interface ParallelDataProperties {
    
    Name?: string;
    
    Arn?: string;
    
    Description?: string;
    
    Status?: ParallelDataStatus | string;
    
    SourceLanguageCode?: string;
    
    TargetLanguageCodes?: string[];
    
    ParallelDataConfig?: ParallelDataConfig;
    
    Message?: string;
    
    ImportedDataSize?: number;
    
    ImportedRecordCount?: number;
    
    FailedRecordCount?: number;
    
    SkippedRecordCount?: number;
    
    EncryptionKey?: EncryptionKey;
    
    CreatedAt?: Date;
    
    LastUpdatedAt?: Date;
    
    LatestUpdateAttemptStatus?: ParallelDataStatus | string;
    
    LatestUpdateAttemptAt?: Date;
}
export declare namespace ParallelDataProperties {
    
    const filterSensitiveLog: (obj: ParallelDataProperties) => any;
}
export interface GetParallelDataResponse {
    
    ParallelDataProperties?: ParallelDataProperties;
    
    DataLocation?: ParallelDataDataLocation;
    
    AuxiliaryDataLocation?: ParallelDataDataLocation;
    
    LatestUpdateAttemptAuxiliaryDataLocation?: ParallelDataDataLocation;
}
export declare namespace GetParallelDataResponse {
    
    const filterSensitiveLog: (obj: GetParallelDataResponse) => any;
}
export declare enum TerminologyDataFormat {
    CSV = "CSV",
    TMX = "TMX",
    TSV = "TSV"
}
export interface GetTerminologyRequest {
    
    Name: string | undefined;
    
    TerminologyDataFormat?: TerminologyDataFormat | string;
}
export declare namespace GetTerminologyRequest {
    
    const filterSensitiveLog: (obj: GetTerminologyRequest) => any;
}

export interface TerminologyDataLocation {
    
    RepositoryType: string | undefined;
    
    Location: string | undefined;
}
export declare namespace TerminologyDataLocation {
    
    const filterSensitiveLog: (obj: TerminologyDataLocation) => any;
}
export declare enum Directionality {
    MULTI = "MULTI",
    UNI = "UNI"
}

export interface TerminologyProperties {
    
    Name?: string;
    
    Description?: string;
    
    Arn?: string;
    
    SourceLanguageCode?: string;
    
    TargetLanguageCodes?: string[];
    
    EncryptionKey?: EncryptionKey;
    
    SizeBytes?: number;
    
    TermCount?: number;
    
    CreatedAt?: Date;
    
    LastUpdatedAt?: Date;
    
    Directionality?: Directionality | string;
    
    Message?: string;
    
    SkippedTermCount?: number;
    
    Format?: TerminologyDataFormat | string;
}
export declare namespace TerminologyProperties {
    
    const filterSensitiveLog: (obj: TerminologyProperties) => any;
}
export interface GetTerminologyResponse {
    
    TerminologyProperties?: TerminologyProperties;
    
    TerminologyDataLocation?: TerminologyDataLocation;
    
    AuxiliaryDataLocation?: TerminologyDataLocation;
}
export declare namespace GetTerminologyResponse {
    
    const filterSensitiveLog: (obj: GetTerminologyResponse) => any;
}
export declare enum MergeStrategy {
    OVERWRITE = "OVERWRITE"
}

export interface TerminologyData {
    
    File: Uint8Array | undefined;
    
    Format: TerminologyDataFormat | string | undefined;
    
    Directionality?: Directionality | string;
}
export declare namespace TerminologyData {
    
    const filterSensitiveLog: (obj: TerminologyData) => any;
}
export interface ImportTerminologyRequest {
    
    Name: string | undefined;
    
    MergeStrategy: MergeStrategy | string | undefined;
    
    Description?: string;
    
    TerminologyData: TerminologyData | undefined;
    
    EncryptionKey?: EncryptionKey;
}
export declare namespace ImportTerminologyRequest {
    
    const filterSensitiveLog: (obj: ImportTerminologyRequest) => any;
}
export interface ImportTerminologyResponse {
    
    TerminologyProperties?: TerminologyProperties;
    
    AuxiliaryDataLocation?: TerminologyDataLocation;
}
export declare namespace ImportTerminologyResponse {
    
    const filterSensitiveLog: (obj: ImportTerminologyResponse) => any;
}
export interface ListParallelDataRequest {
    
    NextToken?: string;
    
    MaxResults?: number;
}
export declare namespace ListParallelDataRequest {
    
    const filterSensitiveLog: (obj: ListParallelDataRequest) => any;
}
export interface ListParallelDataResponse {
    
    ParallelDataPropertiesList?: ParallelDataProperties[];
    
    NextToken?: string;
}
export declare namespace ListParallelDataResponse {
    
    const filterSensitiveLog: (obj: ListParallelDataResponse) => any;
}
export interface ListTerminologiesRequest {
    
    NextToken?: string;
    
    MaxResults?: number;
}
export declare namespace ListTerminologiesRequest {
    
    const filterSensitiveLog: (obj: ListTerminologiesRequest) => any;
}
export interface ListTerminologiesResponse {
    
    TerminologyPropertiesList?: TerminologyProperties[];
    
    NextToken?: string;
}
export declare namespace ListTerminologiesResponse {
    
    const filterSensitiveLog: (obj: ListTerminologiesResponse) => any;
}

export interface InvalidFilterException extends __SmithyException, $MetadataBearer {
    name: "InvalidFilterException";
    $fault: "client";
    Message?: string;
}
export declare namespace InvalidFilterException {
    
    const filterSensitiveLog: (obj: InvalidFilterException) => any;
}

export interface TextTranslationJobFilter {
    
    JobName?: string;
    
    JobStatus?: JobStatus | string;
    
    SubmittedBeforeTime?: Date;
    
    SubmittedAfterTime?: Date;
}
export declare namespace TextTranslationJobFilter {
    
    const filterSensitiveLog: (obj: TextTranslationJobFilter) => any;
}
export interface ListTextTranslationJobsRequest {
    
    Filter?: TextTranslationJobFilter;
    
    NextToken?: string;
    
    MaxResults?: number;
}
export declare namespace ListTextTranslationJobsRequest {
    
    const filterSensitiveLog: (obj: ListTextTranslationJobsRequest) => any;
}
export interface ListTextTranslationJobsResponse {
    
    TextTranslationJobPropertiesList?: TextTranslationJobProperties[];
    
    NextToken?: string;
}
export declare namespace ListTextTranslationJobsResponse {
    
    const filterSensitiveLog: (obj: ListTextTranslationJobsResponse) => any;
}
export interface StartTextTranslationJobRequest {
    
    JobName?: string;
    
    InputDataConfig: InputDataConfig | undefined;
    
    OutputDataConfig: OutputDataConfig | undefined;
    
    DataAccessRoleArn: string | undefined;
    
    SourceLanguageCode: string | undefined;
    
    TargetLanguageCodes: string[] | undefined;
    
    TerminologyNames?: string[];
    
    ParallelDataNames?: string[];
    
    ClientToken?: string;
}
export declare namespace StartTextTranslationJobRequest {
    
    const filterSensitiveLog: (obj: StartTextTranslationJobRequest) => any;
}
export interface StartTextTranslationJobResponse {
    
    JobId?: string;
    
    JobStatus?: JobStatus | string;
}
export declare namespace StartTextTranslationJobResponse {
    
    const filterSensitiveLog: (obj: StartTextTranslationJobResponse) => any;
}

export interface UnsupportedLanguagePairException extends __SmithyException, $MetadataBearer {
    name: "UnsupportedLanguagePairException";
    $fault: "client";
    Message?: string;
    
    SourceLanguageCode?: string;
    
    TargetLanguageCode?: string;
}
export declare namespace UnsupportedLanguagePairException {
    
    const filterSensitiveLog: (obj: UnsupportedLanguagePairException) => any;
}
export interface StopTextTranslationJobRequest {
    
    JobId: string | undefined;
}
export declare namespace StopTextTranslationJobRequest {
    
    const filterSensitiveLog: (obj: StopTextTranslationJobRequest) => any;
}
export interface StopTextTranslationJobResponse {
    
    JobId?: string;
    
    JobStatus?: JobStatus | string;
}
export declare namespace StopTextTranslationJobResponse {
    
    const filterSensitiveLog: (obj: StopTextTranslationJobResponse) => any;
}

export interface DetectedLanguageLowConfidenceException extends __SmithyException, $MetadataBearer {
    name: "DetectedLanguageLowConfidenceException";
    $fault: "client";
    Message?: string;
    
    DetectedLanguageCode?: string;
}
export declare namespace DetectedLanguageLowConfidenceException {
    
    const filterSensitiveLog: (obj: DetectedLanguageLowConfidenceException) => any;
}

export interface ServiceUnavailableException extends __SmithyException, $MetadataBearer {
    name: "ServiceUnavailableException";
    $fault: "server";
    Message?: string;
}
export declare namespace ServiceUnavailableException {
    
    const filterSensitiveLog: (obj: ServiceUnavailableException) => any;
}

export interface TextSizeLimitExceededException extends __SmithyException, $MetadataBearer {
    name: "TextSizeLimitExceededException";
    $fault: "client";
    Message?: string;
}
export declare namespace TextSizeLimitExceededException {
    
    const filterSensitiveLog: (obj: TextSizeLimitExceededException) => any;
}
export interface TranslateTextRequest {
    
    Text: string | undefined;
    
    TerminologyNames?: string[];
    
    SourceLanguageCode: string | undefined;
    
    TargetLanguageCode: string | undefined;
}
export declare namespace TranslateTextRequest {
    
    const filterSensitiveLog: (obj: TranslateTextRequest) => any;
}
export interface TranslateTextResponse {
    
    TranslatedText: string | undefined;
    
    SourceLanguageCode: string | undefined;
    
    TargetLanguageCode: string | undefined;
    
    AppliedTerminologies?: AppliedTerminology[];
}
export declare namespace TranslateTextResponse {
    
    const filterSensitiveLog: (obj: TranslateTextResponse) => any;
}
export interface UpdateParallelDataRequest {
    
    Name: string | undefined;
    
    Description?: string;
    
    ParallelDataConfig: ParallelDataConfig | undefined;
    
    ClientToken?: string;
}
export declare namespace UpdateParallelDataRequest {
    
    const filterSensitiveLog: (obj: UpdateParallelDataRequest) => any;
}
export interface UpdateParallelDataResponse {
    
    Name?: string;
    
    Status?: ParallelDataStatus | string;
    
    LatestUpdateAttemptStatus?: ParallelDataStatus | string;
    
    LatestUpdateAttemptAt?: Date;
}
export declare namespace UpdateParallelDataResponse {
    
    const filterSensitiveLog: (obj: UpdateParallelDataResponse) => any;
}
